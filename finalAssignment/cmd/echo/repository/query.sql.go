// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package repository

import (
	"context"
	//"database/sql"
)

const deleteListByID = `-- name: DeleteListByID :exec
DELETE FROM lists WHERE ID_OF_LIST = $1
`

func (q *Queries) DeleteListByID(ctx context.Context, idOfList int64) error {
	_, err := q.db.ExecContext(ctx, deleteListByID, idOfList)
	return err
}	

const deleteTasktByID = `-- name: DeleteTasktByID :exec
DELETE FROM tasks WHERE ID_OF_TASK = $1
`

func (q *Queries) DeleteTasktByID(ctx context.Context, idOfTask int64) error {
	_, err := q.db.ExecContext(ctx, deleteTasktByID, idOfTask)
	return err
}
const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE ID_OF_USER = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, idOfUser int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, idOfUser)
	return err
}
const getListById = `-- name: GetListById :one
SELECT id_of_list, name, userid FROM lists WHERE ID_OF_LIST = $1 LIMIT 1
`

func (q *Queries) GetListById(ctx context.Context, idOfList int64) (List, error) {
	row := q.db.QueryRowContext(ctx, getListById, idOfList)
	var i List
	err := row.Scan(&i.IDOfList, &i.Name, &i.Userid)
	return i, err
}

const getListsForCurrentUser = `-- name: GetListsForCurrentUser :many
SELECT ID_OF_LIST, NAME FROM lists WHERE USERID = $1
`

type GetListsForCurrentUserRow struct {
	IDOfList int64 `json:"id"`
	Name     string `json:"name"`
}

func (q *Queries) GetListsForCurrentUser(ctx context.Context, userid int64) ([]GetListsForCurrentUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getListsForCurrentUser, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListsForCurrentUserRow
	for rows.Next() {
		var i GetListsForCurrentUserRow
		if err := rows.Scan(&i.IDOfList, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
const getTaskByID = `-- name: GetTaskByID :one
SELECT id_of_task, text, listid, completed FROM tasks WHERE ID_OF_TASK = $1 LIMIT 1
`

func (q *Queries) GetTaskByID(ctx context.Context, idOfTask int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, idOfTask)
	var i Task
	err := row.Scan(
		&i.IDOfTask,
		&i.Text,
		&i.Listid,
		&i.Completed,
	)
	return i, err
}
const getTasksForCurrentList = `-- name: GetTasksForCurrentList :many
SELECT id_of_task, text, listid, completed FROM tasks WHERE LISTID = $1
`

func (q *Queries) GetTasksForCurrentList(ctx context.Context, listid int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksForCurrentList, listid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.IDOfTask,
			&i.Text,
			&i.Listid,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id_of_user, username, password FROM users WHERE ID_OF_USER = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, idOfUser int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, idOfUser)
	var i User
	err := row.Scan(&i.IDOfUser, &i.Username, &i.Password)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id_of_user, username, password FROM users WHERE USERNAME = $1 LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(&i.IDOfUser, &i.Username, &i.Password)
	return i, err
}

const insertListInDB = `-- name: InsertListInDB :one
INSERT INTO lists (NAME, USERID) VALUES ($1, $2) RETURNING id_of_list, name, userid
`

type InsertListInDBParams struct {
	Name   string `json:"name"`
	Userid int64 
}

func (q *Queries) InsertListInDB(ctx context.Context, arg InsertListInDBParams) (List, error) {
	row := q.db.QueryRowContext(ctx, insertListInDB, arg.Name, arg.Userid)
	var i List
	err := row.Scan(&i.IDOfList, &i.Name, &i.Userid)
	return i, err
}

const insertTaskInDB = `-- name: InsertTaskInDB :one
INSERT INTO tasks (TEXT, LISTID, COMPLETED) VALUES ($1, $2, $3) RETURNING id_of_task, text, listid, completed
`
type ListsPageData struct{
	PageTitle string
	Links []GetListsForCurrentUserRow
}
type InsertTaskInDBParams struct {
	Text      string`json:"text"`
	Listid    int64
	Completed bool
}

func (q *Queries) InsertTaskInDB(ctx context.Context, arg InsertTaskInDBParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, insertTaskInDB, arg.Text, arg.Listid, arg.Completed)
	var i Task
	err := row.Scan(
		&i.IDOfTask,
		&i.Text,
		&i.Listid,
		&i.Completed,
	)
	return i, err
}

const insertUserInDB = `-- name: InsertUserInDB :one
INSERT INTO users (USERNAME, PASSWORD) VALUES ( $1, $2 ) RETURNING id_of_user, username, password
`

type InsertUserInDBParams struct {
	Username string
	Password string
}

func (q *Queries) InsertUserInDB(ctx context.Context, arg InsertUserInDBParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUserInDB, arg.Username, arg.Password)
	var i User
	err := row.Scan(&i.IDOfUser, &i.Username, &i.Password)
	return i, err
}

const patchTaskInDB = `-- name: PatchTaskInDB :exec
UPDATE tasks set COMPLETED = $1 WHERE ID_OF_TASK = $2
`

type PatchTaskInDBParams struct {
	Completed bool `json:"completed"`
	IDOfTask  int64
}

func (q *Queries) PatchTaskInDB(ctx context.Context, arg PatchTaskInDBParams) error {
	_, err := q.db.ExecContext(ctx, patchTaskInDB, arg.Completed, arg.IDOfTask)
	return err
}
